document.addEventListener('DOMContentLoaded', () => {

const $  = sel => document.querySelector(sel);
const $$ = sel => document.querySelectorAll(sel);
const addDays = (d, n) => {
  const date = new Date(d);
  date.setDate(date.getDate() + n);
  return date.toLocaleDateString('ru-RU');
};

const smartCard  = $('#smartCard');      
const smartModal = $('#smartModal');     
const smartClose = smartModal.querySelector('.close-btn');

const steps = {
  info   : $('#step-info'),
  details: $('#step-details'),
  survey : $('#step-survey'),
  form   : $('#step-form')
};

function showStep(key){
  Object.values(steps).forEach(s => s.hidden = true);
  steps[key].hidden = false;
}

function updateModalTitle() {
  const modal = document.querySelector('.modal');
  const modalTitle = document.querySelector('.modal-title');
  const visible = modal.querySelector('.step:not([hidden])');
  if (!visible) { modalTitle.textContent = ''; return; }
  const h = visible.querySelector('h2,h3');
  modalTitle.textContent = h ? h.textContent.trim() : (visible.dataset.title || '');
}

smartCard.addEventListener('click', () => {
  smartModal.classList.add('show');
  showStep('info');
  updateModalTitle();
});
smartClose.addEventListener('click', () =>
  smartModal.classList.remove('show'));
smartModal.addEventListener('click', e=>{
  if (e.target === smartModal) smartModal.classList.remove('show');
});

$('#toDetails').onclick = () => showStep('details');
$('#toSurvey' ).onclick = () => showStep('survey');
$('#toForm'   ).onclick = () => showStep('form');
$('#backInfo1').onclick =
$('#backInfo2').onclick =
$('#backInfo3').onclick = () => showStep('info');

function sync(range, out, suff = ''){
  out.textContent = range.value + suff;
  range.addEventListener('input',
    () => out.textContent = range.value + suff);
}
sync($('#term'),    $('#termVal'));
sync($('#reserve'), $('#reserveVal'));

$('#surveyForm').addEventListener('submit', e=>{
  e.preventDefault();
  const f   = e.target;
  const amt = +f.amount.value;
  const hor = f.horizon.value;
  const pri = f.priority.value;
  const box = $('#surveyResult');

  let ok = (amt <= 30000)
           ? (pri !== 'flex')
           : (pri === 'rate' && hor !== '3+ –≥–æ–¥–∞');

  box.hidden = false;
  box.className = 'survey-result ' + (ok ? 'good' : 'bad');
  box.innerHTML = ok
    ? `üëç <strong>Smart–í–∫–ª–∞–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞–º.</strong><br>
       –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ª—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–∏–ª–∏—è—Ö.<br><br>
       <button id="resultToForm" class="btn" style="margin-top:8px">
         –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
       </button>`
    : `üëÄ <strong>Smart–í–∫–ª–∞–¥ —Å–µ–π—á–∞—Å –Ω–µ –æ–ø—Ç–∏–º–∞–ª–µ–Ω.</strong><br>
       –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å
       –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –≤ –±–∞–Ω–∫–µ.`;

  $('#resultToForm')?.addEventListener('click', () => showStep('form'));
});

$$('.task-panel').forEach(panel=>{
  panel.querySelector('.tp-header')
       .addEventListener('click',
         () => panel.classList.toggle('is-open'));
});
$$('.panel .shapka-card').forEach(head=>{
  head.addEventListener('click',
    () => head.parentElement.classList.toggle('collapsed'));
});
const form     = $('#depositForm');
const tplSmart = $('#tpl-smart');
const products = $('.products');
const banner   = $('.banner');

const dlgAlert = $('#dlg-alert');
dlgAlert.querySelector('.dlg-close')
        .addEventListener('click', () => dlgAlert.close());

const dlgInfo  = $('#dlg-info');
const dlgClose = $('#dlg-close');

const agreeBox = $('#closeAgree');
const btnYes   = dlgClose.querySelector('.btn-dark-new');
const btnCancelClose = dlgClose.querySelector('.dlg-cancel');

let pendingCard = null; 

form.addEventListener('submit', e=>{
  e.preventDefault();

  const monthly = +$('#monthly').value || 0;
  const term    = +$('#term').value    || 0;
  const sum     = monthly;
  const today   = new Date();

  const card = tplSmart.content.firstElementChild.cloneNode(true);

  const income      = sum * 0.12;

  Object.assign(card.dataset, {
    bank   : '–¢-–±–∞–Ω–∫',
    sum    : sum.toLocaleString('ru-RU') + ' ‚ÇΩ',
    income : (sum + income).toLocaleString('ru-RU') + ' ‚ÇΩ',
    incomeDelta : '(+' + income.toLocaleString('ru-RU') + ' ‚ÇΩ)',
    count  : '1',
    max    : term + ' –º–µ—Å',
    end    : addDays(today, term*30),
    next   : addDays(today, 30),
    goals  : '–ù–∞–∫–æ–ø–∏—Ç—å 150 000 ‚ÇΩ –Ω–∞ –º–∞—à–∏–Ω—É',
    achv   : '–°–∞–º—É—Ä–∞–π|–í–∏–Ω-—Å—Ç—Ä–∏–∫'
  });

  card.querySelector('[data-el="sum"]').textContent    = card.dataset.sum;
  card.querySelector('[data-el="income"]').textContent = income.toLocaleString('ru-RU') + ' ‚ÇΩ';
  card.querySelector('[data-el="count"]').textContent  = card.dataset.count;

  card.addEventListener('click', () => openInfo(card));

  products.insertBefore(card, banner);

  smartModal.classList.remove('show');
  dlgAlert.showModal();
});

/* ---- Helpers: –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–µ–ª—å, —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å info-–∏–∫–æ–Ω–∫–∏ ---- */

function renderGoalsList(card) {
  const goalsRaw = card.dataset.goals || '';
  const arr = goalsRaw ? goalsRaw.split('|').filter(Boolean) : [];
  const ul = dlgInfo.querySelector('.goal-list');
  ul.innerHTML = arr.map((g, idx) => `
    <li data-idx="${idx}">
      <span class="goal-text">${escapeHtml(g)}</span>
      <button class="remove-goal" type="button" aria-label="–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å">√ó</button>
    </li>
  `).join('');
}

// –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ)
const ACHV_DESCRIPTIONS = {
  '–°–∞–º—É—Ä–∞–π': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: —É–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –≤–∫–ª–∞–¥ –∞–∫—Ç–∏–≤–Ω—ã–º –±–µ–∑ —Å–Ω—è—Ç–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ ‚Äî –ø—Ä–æ—è–≤–∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.',
  '–í–∏–Ω-—Å—Ç—Ä–∏–∫': '–°–µ—Ä–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤.'
};

// –ó–∞–º–µ–Ω–∏—Ç–µ/–¥–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à renderAchvList –Ω–∞ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
function renderAchvList(card) {
  const achvRaw = card.dataset.achv || '';
  const arr = achvRaw ? achvRaw.split('|').filter(Boolean) : [];
  const ul = dlgInfo.querySelector('.achv-list');

  ul.innerHTML = arr.map(a => {
    const desc = ACHV_DESCRIPTIONS[a] || '–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é.';
    return `
      <li>
        <span class="achv-text">${escapeHtml(a)}</span>
        <span class="info-icon" tabindex="0" data-tooltip="${escapeHtml(desc)}">i</span>
      </li>
    `;
  }).join('');

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤ (—Ç–æ—Ç –∂–µ fallback, —á—Ç–æ –∏ —Ä–∞–Ω–µ–µ)
  initLocalInfoIcons(dlgInfo);
}


/* –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ü–µ–ª—å –≤ pendingCard –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI */
function addGoalToPendingCard(text) {
  if (!pendingCard) return;
  const clean = (text || '').trim();
  if (!clean) return;
  const prev = pendingCard.dataset.goals || '';
  pendingCard.dataset.goals = prev ? (prev + '|' + clean) : clean;

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª–∫—É (–≤–∏–¥–∏–º–æ openInfo –æ—Ç–∫—Ä—ã—Ç)
  renderGoalsList(pendingCard);

  // –¢–∞–∫–∂–µ, –µ—Å–ª–∏ —É –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–¥–µ-—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (tpl), –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è
  // –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. –ï—Å–ª–∏ —É –≤–∞—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM –∏—Å–ø–æ–ª—å–∑—É—é—Ç data-field,
  // —Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∂–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é.
}

/* –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ –∏–Ω–¥–µ–∫—Å—É (–≤ —Ä–∞–º–∫–∞—Ö pendingCard) */
function removeGoalFromPendingCard(index) {
  if (!pendingCard) return;
  const arr = (pendingCard.dataset.goals || '').split('|').filter(Boolean);
  if (index < 0 || index >= arr.length) return;
  arr.splice(index, 1);
  pendingCard.dataset.goals = arr.join('|');
  renderGoalsList(pendingCard);
}

/* –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç XSS –≤ —Ç–µ–∫—Å—Ç–µ —Ü–µ–ª–µ–π/–∞—á–∏–≤–æ–≤ */
function escapeHtml(s) {
  return String(s).replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
}

/* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç—É–ª—Ç–∏–ø–æ–≤ –¥–ª—è .info-icon –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (fallback) */
function initLocalInfoIcons(container) {
  const icons = (container || document).querySelectorAll('.info-icon');
  icons.forEach(icon => {
    // –µ—Å–ª–∏ —É –∏–∫–æ–Ω–∫–∏ —É–∂–µ –µ—Å—Ç—å .tooltip ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (icon.querySelector('.tooltip')) return;
    const txt = icon.getAttribute('data-tooltip') || '';
    const tip = document.createElement('div');
    tip.className = 'tooltip';
    tip.textContent = txt;
    tip.style.display = 'none';
    tip.style.position = 'absolute';
    tip.style.background = '#222';
    tip.style.color = '#fff';
    tip.style.padding = '8px 10px';
    tip.style.borderRadius = '6px';
    tip.style.fontSize = '13px';
    tip.style.zIndex = 9999;
    icon.style.position = 'relative';
    icon.appendChild(tip);

    icon.addEventListener('mouseenter', ()=> tip.style.display = 'block');
    icon.addEventListener('mouseleave', ()=> tip.style.display = 'none');
    icon.addEventListener('focus', ()=> tip.style.display = 'block');
    icon.addEventListener('blur', ()=> tip.style.display = 'none');

    // –¥–ª—è –∫–ª–∏–∫–∞ (–º–æ–±–∞–π–ª) ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å
    icon.addEventListener('click', (e)=> {
      e.stopPropagation();
      tip.style.display = tip.style.display === 'block' ? 'none' : 'block';
    });
  });
}

/* ---- Event delegation: —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π ---- */

dlgInfo.addEventListener('click', (e) => {
  // —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å
  const rem = e.target.closest('.remove-goal');
  if (rem) {
    const li = rem.closest('li');
    const idx = Number(li.getAttribute('data-idx'));
    removeGoalFromPendingCard(idx);
    return;
  }
});

// –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ Enter –≤ –ø–æ–ª–µ
dlgInfo.querySelector('#goal-input').addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    const val = e.target.value;
    if (val && val.trim()) {
      addGoalToPendingCard(val);
      e.target.value = '';
    }
  }
});

// –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ
dlgInfo.querySelector('#add-goal-btn').addEventListener('click', () => {
  const inp = dlgInfo.querySelector('#goal-input');
  const val = inp.value;
  if (val && val.trim()) {
    addGoalToPendingCard(val);
    inp.value = '';
    inp.focus();
  }
});

function openInfo(card){
  pendingCard = card;

  ['bank','sum','income','incomeDelta','count','max','end','next']
    .forEach(key=>{
      const el = dlgInfo.querySelector(`[data-field="${key}"]`);
      if (el) el.textContent = card.dataset[key] || '‚Äî';
    });

  // –†–µ–Ω–¥–µ—Ä —Ü–µ–ª–µ–π –∏ –∞—á–∏–≤–æ–∫ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–Ω–∏ –æ–±–Ω–æ–≤—è—Ç DOM –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ç—É–ª—Ç–∏–ø—ã)
  renderGoalsList(card);
  renderAchvList(card);

  dlgInfo.showModal();
}

// function openInfo(card){
//   pendingCard = card;

//   ['bank','sum','income','incomeDelta','count','max','end','next']
//     .forEach(key=>{
//       const el = dlgInfo.querySelector(`[data-field="${key}"]`);
//       if (el) el.textContent = card.dataset[key] || '‚Äî';
//     });

//   dlgInfo.querySelector('.goal-list').innerHTML =
//     (card.dataset.goals||'')
//       .split('|').filter(Boolean).map(t=>`<li>${t}</li>`).join('');
//   dlgInfo.querySelector('.achv-list').innerHTML =
//     (card.dataset.achv||'')
//       .split('|').filter(Boolean).map(t=>`<li>${t}</li>`).join('');

//   dlgInfo.showModal();
// }

dlgInfo.querySelector('.dlg-x')
       .addEventListener('click', () => dlgInfo.close());


dlgInfo.querySelector('.close-deposit')
       .addEventListener('click', () => {
         dlgInfo.close();
         agreeBox.checked = false;
         btnYes.disabled  = true;
         dlgClose.showModal();
       });

agreeBox.addEventListener('change',
  () => btnYes.disabled = !agreeBox.checked);


btnYes.addEventListener('click', () => {
  pendingCard?.remove();
  dlgClose.close();
  pendingCard = null;
});

btnCancelClose.addEventListener('click', () => dlgClose.close());



        
// –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ 
const icons = document.querySelectorAll('.info-icon');

icons.forEach(icon => {
            // —Å–æ–∑–¥–∞—ë–º DOM —Ç—É–ª—Ç–∏–ø –∏–∑ data-tooltip (–¥–µ–ª–∞–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ª–µ–≥—á–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å)
            const tipText = icon.getAttribute('data-tooltip') || '';
            const tip = document.createElement('div');
            tip.className = 'tooltip';
            tip.textContent = tipText;
            icon.appendChild(tip);
        
            // aria support
            const id = 'tip-' + Math.random().toString(36).slice(2,9);
            tip.id = id;
            icon.setAttribute('aria-describedby', id);
        
            // hover –¥–ª—è desktop
            icon.addEventListener('mouseenter', () => icon.classList.add('show'));
            icon.addEventListener('mouseleave', () => icon.classList.remove('show'));
        
            // click/tap –¥–ª—è mobile: –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
            icon.addEventListener('click', (e) => {
              e.stopPropagation();
              icons.forEach(i => { if (i !== icon) i.classList.remove('show'); });
              icon.classList.toggle('show');
            });
        
            // –∫–ª–∞–≤–∏—à–∏: Enter / Space –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —Ç—É–ª—Ç–∏–ø
            icon.addEventListener('keydown', (e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                icon.classList.toggle('show');
              } else if (e.key === 'Escape') {
                icon.classList.remove('show');
              }
            });
});
        
document.addEventListener('click', () => {
            document.querySelectorAll('.info-icon.show').forEach(i => i.classList.remove('show'));
  });
    
  

// –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ (–º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å)
(function () {
  // –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞)
  const BANKS = [
    { id: 'sber', name: '–°–±–µ—Ä' },
    { id: 'tinkoff', name: '–¢-–±–∞–Ω–∫' },
    { id: 'vtb', name: '–í–¢–ë' },
    { id: 'alfabank', name: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫' },
    { id: 'gazprom', name: '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫' }
  ];

  function initBanSelect(rootId = 'banSelect') {
    const root = document.getElementById(rootId);
    if (!root) return;
    const search = root.querySelector('.ms-search');
    const list = root.querySelector('.ms-list');
    const chipsWrap = root.querySelector('.ms-chips');
    const hidden = document.getElementById('ban-input');
    const selection = root.querySelector('.ms-selection');

    let filtered = [...BANKS];
    let selected = []; // array of bank objects
    let focusedIndex = -1;

    // render list items
    function renderList() {
      list.innerHTML = '';
      filtered.forEach((b, i) => {
        const li = document.createElement('li');
        li.className = 'ms-item';
        li.setAttribute('role', 'option');
        li.setAttribute('data-id', b.id);
        li.setAttribute('data-name', b.name);
        li.textContent = b.name;
        li.tabIndex = -1;
        const isSelected = selected.find(s => s.id === b.id);
        li.setAttribute('aria-selected', !!isSelected);
        list.appendChild(li);
      });
      // show/hide list
      list.hidden = filtered.length === 0;
    }

    // render chips
    function renderChips() {
      chipsWrap.innerHTML = '';
      selected.forEach(b => {
        const chip = document.createElement('span');
        chip.className = 'ms-chip';
        chip.setAttribute('data-id', b.id);
        chip.innerHTML = `<span class="ms-chip-label">${b.name}</span><span class="remove" aria-hidden="true">√ó</span>`;
        chipsWrap.appendChild(chip);
      });
      // update hidden input (comma-separated ids)
      hidden.value = selected.map(s => s.id).join(',');
    }
    

    
    
    (function(){
      const modal = document.querySelector('.modal');
      const modalTitle = document.querySelector('.modal-title');
    
      function updateModalTitle() {
        const visible = modal.querySelector('.step:not([hidden])');
        if (!visible) { modalTitle.textContent = ''; return; }
        const h = visible.querySelector('h2,h3');
        modalTitle.textContent = h ? h.textContent.trim() : (visible.dataset.title || '');
      }
    
      // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      document.addEventListener('DOMContentLoaded', updateModalTitle);
    
      // –ï—Å–ª–∏ —É –≤–∞—Å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç hidden ‚Äî –≤—ã–∑—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∏–∫–∏ –ø–æ –≤–∞—à–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      document.addEventListener('click', (e) => {
        if (e.target.matches('#toDetails, #toSurvey, #toForm, #backInfo1, #backInfo2, #backInfo3')) {
          // –¥–∞—ë–º —à–∞–Ω—Å –¥—Ä—É–≥–æ–º—É –∫–æ–¥—É –æ–±–Ω–æ–≤–∏—Ç—å DOM
          requestAnimationFrame(updateModalTitle);
          setTimeout(updateModalTitle, 40);
        }
      });
    
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, –≤—ã–∑—ã–≤–∞–π—Ç–µ updateModalTitle() –ø–æ—Å–ª–µ show.
    })();

    function openList() {
      list.hidden = false;
      selection.setAttribute('aria-expanded', 'true');
    }
    function closeList() {
      list.hidden = true;
      selection.setAttribute('aria-expanded', 'false');
      focusedIndex = -1;
      updateFocus();
    }

    function updateFocus() {
      const items = Array.from(list.children);
      items.forEach((it, idx) => {
        if (idx === focusedIndex) {
          it.classList.add('focused');
          it.focus();
        } else {
          it.classList.remove('focused');
        }
      });
    }

    // filter on input
    function doFilter(q) {
      const qq = (q || '').trim().toLowerCase();
      filtered = BANKS.filter(b => b.name.toLowerCase().includes(qq));
      renderList();
    }



    // select bank
    function selectBankById(id) {
      const bank = BANKS.find(b => b.id === id);
      if (!bank) return;
      if (!selected.find(s => s.id === bank.id)) {
        selected.push(bank);
        renderChips();
        renderList();
      }
    }

    // deselect
    function deselectById(id) {
      selected = selected.filter(s => s.id !== id);
      renderChips();
      renderList();
    }

    // click on item
    list.addEventListener('click', (e) => {
      const li = e.target.closest('.ms-item');
      if (!li) return;
      const id = li.getAttribute('data-id');
      selectBankById(id);
      search.value = '';
      doFilter('');
      search.focus();
      openList();
    });

    // chips: remove by click
    chipsWrap.addEventListener('click', (e) => {
      const chip = e.target.closest('.ms-chip');
      if (!chip) return;
      if (e.target.classList.contains('remove')) {
        const id = chip.getAttribute('data-id');
        deselectById(id);
      }
    });

    // keyboard interactions
    search.addEventListener('keydown', (e) => {
      const items = Array.from(list.children);
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (items.length === 0) return;
        focusedIndex = Math.min(items.length - 1, focusedIndex + 1);
        updateFocus();
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (items.length === 0) return;
        focusedIndex = Math.max(0, focusedIndex - 1);
        updateFocus();
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (focusedIndex >= 0 && items[focusedIndex]) {
          const id = items[focusedIndex].getAttribute('data-id');
          selectBankById(id);
          search.value = '';
          doFilter('');
        }
      } else if (e.key === 'Backspace' && search.value === '') {
        // —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∏–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        if (selected.length) {
          deselectById(selected[selected.length - 1].id);
        }
      } else if (e.key === 'Escape') {
        closeList();
      }
    });

    // typing filter
    search.addEventListener('input', (e) => {
      doFilter(e.target.value);
      openList();
      focusedIndex = -1;
    });

    // focus behavior: open list on focus
    selection.addEventListener('focus', () => {
      doFilter(search.value);
      openList();
    });

    // click on selection opens search
    selection.addEventListener('click', () => {
      search.focus();
      doFilter(search.value);
      openList();
    });

    // click outside close
    document.addEventListener('click', (e) => {
      if (!root.contains(e.target)) closeList();
    });

    // initial render
    doFilter('');
    renderChips();
    renderList();
  }

  
  // wait DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => initBanSelect());
  } else {
    initBanSelect();
  }
})();  
}); 
